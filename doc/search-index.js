var searchIndex = {};
searchIndex['main'] = {"items":[],"paths":[]};
searchIndex['parser'] = {"items":[[0,"","parser",""],[1,"Node","","Node is a struct, that represents a node in a tree representing the parsing structure."],[11,"arity","","",0],[11,"value","","",0],[11,"first","","",0],[11,"second","","",0],[2,"OpArity","","OpArity is an enumeration that represents the four ways identifiers and operators can be used."],[12,"Binary","","",1],[12,"Literal","","",1],[12,"Unary","","",1],[12,"Function","","",1]],"paths":[[1,"Node"],[2,"OpArity"]]};

searchIndex['tokenizer'] = {"items":[[0,"","tokenizer",""],[1,"Token","","Tokens are representations of the items in a program."],[11,"value","","",0],[11,"ttype","","",0],[2,"TokenType","","The different token types that are possible."],[12,"String","","",1],[12,"Identifier","","",1],[12,"OpenParen","","",1],[12,"CloseParen","","",1],[12,"Lambda","","",1],[12,"Assign","","",1],[12,"Separator","","",1],[3,"ttype_of","","Although small and fairly simple, ttype_of is the heart and soul of the tokenizer."],[3,"tokens","","The tokens function is the center of the tokenizer. It splits, separates, checks, matadatas,\nand organizes each and every character in the code string."],[10,"eq","","",1],[10,"ne","","",1],[10,"eq","","",0],[10,"ne","","",0],[10,"fmt","","Here, when asked for formatting, Token returns a string of this format: \"(value: '{}', type: {})\". In the type, since you cannot implement traits for enumerations, it does a match on it, returning a stringified name.",0]],"paths":[[1,"Token"],[2,"TokenType"]]};

initSearch(searchIndex);
